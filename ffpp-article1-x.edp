/*
NOTE: THE INTERFACE IS x=r0
Quick test for article1, before applying in matlab
we will solve equations of w and v first and then solve u
Proposed by Thi
---- domain
Omg=[0,1]x[0,1], r=(x-r0)
---- exact solutions: 
see in the code
---- equation of w (w=u+bet/(alp*lam)v)
-nabla(alpha nabla w) = fw \Omega
[w]=[alpha nabla_n w]=0 \Gamma
w=wex \partial\Omega
---- equation of v
-nabla(beta nabla v) - lam*v*g(u) = fv \Omega
v = nabla_n v = 0 \Gamma
v=vex \partial\Omega
---- u
u = w - bet/(alp*lam)*v
*/

int n=80;
real r0 = 0.3; // interface

border b5(t=0,1){ x=r0; y=t;label=5;}
border b1(t=0,1){ x=t; y=0.;label=1;}
border b2(t=0,1){ x=1; y=t;label=2;}
border b3(t=0,1){ x=1-t; y=1.;label=3;}
border b4(t=0,1){ x=0; y=1-t;label=4;}
mesh Th = buildmesh(b5(n)+b1(n)+b2(n)+b3(n)+b4(n));

// plot(b5(n)+b1(n)+b2(n)+b3(n)+b4(n),wait=1);
// plot(Th,wait=1);

fespace Vh(Th,P1);
fespace Wh(Th,P0);
Vh u,v,w,vold,vv;

real lam = 2.; // lam in the equation
real gam1 = 1e5; // penalty in Omg1
real gam2 = 1e3; // penalty in Omg2

macro dn(u) (N.x*dx(u)+N.y*dy(u)) //  def the normal derivative 
macro g(u) (u^2) // fonction f non lineaire dans (3) et (4)
Vh gu2 = 0.; // in the case vex=0

Vh phi = x-r0;
real alp1 = 1.; // alpha 1
real alp2 = 100.; // alpha 2
real bet1 = 50.; // beta 1
real bet2 = 100.; //beta 2 (should't change!!)

int nbtriangles = Th.nt;
int nbvertices = Th.nv;

// // exact solutions
// Vh uex = (phi<=0)*( (1./alp1)*x^2 ) // (Omg1)
//       + (phi>0)*( (1./alp2)*(x^2-r0^2) + r0^2/alp1 ); // (Omg2)
// Vh vex = (phi<=0)*( (1./bet1)*(x-r0)^2*y ) //  (Omg1)
//         + (phi>0)*( (1./bet2)*(x-r0)^2 ); // (Omg2)
// Vh wex = (phi<=0)*( (1./alp1)*x^2 + (1./(lam*alp1))*(x-r0)^2*y ) //  (Omg1)
//       + (phi>0)*( (1./alp2)*(x^2-r0^2) + r0^2/alp1 + (1./(lam*alp2))*(x-r0)^2 ); // (Omg2)
// Vh fv = (phi<=0)*(-2.*y - lam*vex*g(uex)) // Omg1
//       + (phi>0)* (-2. - lam*vex*g(uex)); // Omg2
// Vh fw = (phi<=0)*(-2. - 2.*y/lam) // Omg1
//       + (phi<0)*(-2. - 2./lam); // Omg2

// exact solutions
// if vex=0 in Omg2
Vh uex = (phi<=0)*( (1./alp1)*x^2 ) // (Omg1)
      + (phi>0)*( (1./alp2)*(x^2-r0^2) + r0^2/alp1 ); // (Omg2)
Vh vex = (phi<=0)*( (1./bet1)*(x-r0)^2*y ) //  (Omg1)
        + (phi>0)*( 0. ); // v=0 in Omg2
Vh wex = (phi<=0)*( (1./alp1)*x^2 + (1./(lam*alp1))*(x-r0)^2*y ) //  (Omg1)
      + (phi>0)*( (1./alp2)*(x^2-r0^2) + r0^2/alp1 ); // v=0 in Omg2
Vh fv = (phi<=0)*(-2.*y - lam*vex*g(uex)) // Omg1
      + (phi>0)* (0.); // v=0 in Omg2
Vh fw = (phi<=0)*(-2. - 2.*y/lam) 
      + (phi>0)* (-2.);

// plot(wex,wait=1,fill=1,value=1,cmm="wex",dim=3); // wex 
plot(vex,wait=1,fill=1,value=1,cmm="vex",dim=2); // vex 
// plot(uex,wait=1,fill=1,value=1,cmm="uex",dim=3); // uex   

// // Resolution du probleme de w
// problem pbw(w,vv,solver=UMFPACK) = 
//                   int2d(Th,levelset=phi)(alp1*(dx(w)*dx(vv)+dy(w)*dy(vv)))
//                 + int2d(Th,levelset=-phi)(alp2*(dx(w)*dx(vv)+dy(w)*dy(vv)))
//                 - int2d(Th,levelset=phi)(fw*vv)
//                 - int2d(Th,levelset=-phi)(fw*vv)
//                 + on(1,2,3,4,w=wex)
// 				        ;


// // Resolution du probleme de v
// problem pbv(v,vv,solver=UMFPACK) = 
//                   int2d(Th,levelset=phi)(bet1*(dx(v)*dx(vv)+dy(v)*dy(vv))) 
//                 + int2d(Th,levelset=-phi)(bet2*(dx(v)*dx(vv)+dy(v)*dy(vv))) 
//                 - int2d(Th,levelset=phi)(v*g(w-(bet1/(lam*alp1))*vold)*vv)
//                 - int2d(Th,levelset=-phi)(v*g(w-(bet2/(lam*alp2))*vold)*vv)
//                 // - int2d(Th,levelset=-phi)(v*gu2*vold*vv) // vex=0
//                 - int1d(Th,levelset=phi)(bet1*dn(v)*vv)
//                 - int1d(Th,levelset=-phi)(bet2*dn(v)*vv)
//                 - int1d(Th,levelset=phi)(bet1*dn(vv)*v)
//                 - int1d(Th,levelset=-phi)(bet2*dn(vv)*v)
//                 + int1d(Th,levelset=phi)(gam1*v*vv)
//                 + int1d(Th,levelset=-phi)(gam2*v*vv)
//                 - int2d(Th,levelset=phi)(fv*vv)
//                 - int2d(Th,levelset=-phi)(fv*vv)
//                 + on(1,2,3,4,v=vex)
//                 ;

// pbw; // solve tw
// plot(wex,wait=1,fill=1,value=1,cmm="wex",dim=3); // wex   
// plot(w,wait=1,value=1,fill=1, cmm="wh",dim=3); // wh

// vold = 0.; // initial value of v
// int imax=30; // number of iterative steps

// // Vh err; real errL2, tol;
// // err = vex;
// // errL2 = sqrt(int2d(Th)(err^2));
// // tol = 1e-2;
// // int i=0;
// // while(errL2>tol && i<imax){
// //   pbv; // solve v
// //   vold = v;
// //   err = abs(v-vex);
// //   errL2 = sqrt(int2d(Th)(err^2));
// //   i=i+1;
// // }

// for(int i=0;i<imax;i++){
//   pbv; // solve v
//   vold = v;
// }

// plot(vex,wait=1,fill=1,value=1,cmm="vex",dim=3);  // vex
// plot(v,wait=1,value=1,fill=1, cmm="vh",dim=3); // vh

// // uh
// u = (phi<=0)*( w - (bet1/(alp1*lam))*v ) // Omg1
//   + (phi>0)*( w - (bet2/(alp2*lam))*v ); // Omg2
// plot(uex,wait=1,fill=1,value=1,cmm="uex",dim=3);  // uex
// plot(u,wait=1,value=1,fill=1, cmm="uh",dim=3); // uh
