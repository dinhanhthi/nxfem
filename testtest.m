addpath(genpath('func'));   % add all necessary functions
clear ; close all; % Initialization


% fixed parameters
%-------------------------------------------------------------------------
pa.degP1D = 3; % Gaussian quadrature points in 1D (polinomial functions)
pa.degP2D = 4; % Gaussian quadrature points in 2D (polinomial functions)
pa.degN = 8;    % Gaussian quadrature points in 2D (non-polynomial functions)
                % degree-#OfPoints : 1-1, 2-3, 3-4, 4-6, 5-7, 6-12,
                %                    7-13, 8-16, 9-19, 10-25, 11-27, 12-33
pa.tol = eps(1e3); % tolerance, 1e-14



%% OPTIONS
%-------------------------------------------------------------------------
model = model_chopp06combine;    % choose model. cf. file model_chopp2007.m

%% NEED TO BE CHANGED EVERY TEST CASE
savePlot = 0; % wanna save plot or not?
    testCase = '16'; % count the test and used to name the folder
    pathOption = '_find';
    moreInfo = 'Test 16: again for 12'; % write inside file txt

%%
showPlot = 1; % wanna show plots?

% for both showPlot & savePlot
withMesh = false;
plotGradv = 0; % plot gradient of v on cut triangles
plotContourChange = 0; % only plot the interface with time (hold on to see the track)
plotSolution = 1; % plot solution or not? (uh, vh)
    
pa.smallCut = 0;  % ignore small-support basis (1=ignore,0=no)
    pa.tH = 10; % to find the small support using (20) or (21) in arnold 2008

useFFmesh = 0; % use mesh generated by freefem++?
    reguMesh = 1; % use regular mesh or not? (only available for matlab)
    nSeg = 121;  % mesh settings (only if useFFmesh=0)
useNewton = 1; % use Newton to solve nonlinear problems?
    itol = 1e-3;
    
% ghost penalty
pa.useGP = 0; % wanna use ghost penalty term?
    pa.gam1 = 1e-6; % parameter for 1st term
    pa.gam2 = 1e-6 ; % parameter for 2nd term

% Fast marching method
useFMM = 0; % use fast marching method or not (mshdist)?
    numUseFMM = 0; % count the number of use of FMM
    alp_FMM = 0.1;
    stepUseFMM = 30; % use every 15 step (disable al_FMM method)

% SUPG
useSUPG = 1; % if 1, need to make more settings
    delEps = 1e-3;
    delSD = 0.5;

% Penalty parameters
%-------------------------------------------------------------------------
cpU.lamH = 1e8; % penalty coefficient for u (substrate)
cpV.lamH = 1e10; % penalty coefficient for v (potential)

% choose the machine to run
%-------------------------------------------------------------------------
% options: thi, gia, lehoan, blouza, gaia, google, ghost
% machine = 'google'; 
% machine = 'blouza';
machine = 'thi';
% machine = 'ghost';
% machine = 'lehoan';




%% Model parameters
%-------------------------------------------------------------------------
% pa.r0 = 0.01;  % interface
% pa.r0 = 0.05; % testing
pa.r0 = 0.04; % testing
    pa.distancing = 0; % make phi to be a signed distance function
pa.muS1 = 8.54932; pa.muS2 = 0;
pa.muP1 = 8.28785; pa.muP2 = 0;
pa.bcu3 = 8.3e-6; % boundary condition for u on \pt\Omg_3
% pa.bcu3 = 1e-1; % testing
cpU.kk1 = 146.88; cpU.kk2 = 183.6; % diff coef for u
cpV.kk1 = 1; cpV.kk2 = 1;    % diff coef for v
pa.f = 0.5; % volume fraction of active biomass
pa.K0 = 5e-7;

useFixedDist = 1; % use fixed distance Dirichlet condition like in Chopp?
%     pa.L = 0.1; % fixed-distance of top-most Dirichlet condition
    pa.L = 0.075; % testing

maxDay = 45; % using dt = dx/|u|
CFL = 1;
  pa.phiNoise = 0.01; % diff phi
    pa.phiHeight = 0.1;

%% DOMAIN
%-------------------------------------------------------------------------
GeoDom = model.domain(); % domain


%% Mesh settings
%-------------------------------------------------------------------------
if ~useFFmesh
    disp('Mesh generated by matlab...');
    if ~reguMesh % not regular mesh?
        hEdgeMax = 2/nSeg;
        [points,edges,triangles] = initmesh(GeoDom,'hmax',hEdgeMax);    % irregular
    else
        [points,edges,triangles] = poimesh(GeoDom,nSeg,nSeg);           % regular
    end
else % using freefem nesh
    disp('Mesh generated by FreeFem++...');
   [points,edges,triangles] = ffreadmesh('./mesh/mesh_chopp06combine.msh');
end

msh.p = points; msh.t = triangles; msh.e = edges;   % save to msh
x = points(1,:);    % x-coordinate of points
y = points(2,:);    % y-coordinate of points

% diameter (longest side) of each triangle: 1 x nTs
msh.hT = getDiam(msh);              % 1 x number of triangles
msh.hTmax = max(msh.hT);            % maximum of all diameters
msh.nStd = size(points,2);          % number of standard nodes


% Level set function (INITIAL)
%-------------------------------------------------------------------------
phi = model.defPhi(x,y,pa); % 1 x number of points (row array)
phi(abs(phi)<pa.tol)=0; % find phi which are very small (~0) and set to 0

tris = getTriangles(phi,msh,pa); % tris has 3 factors (structure var)
    CTs=tris.CTs; NCTs1=tris.NCTs1; NCTs2=tris.NCTs2;

    
    % On cut triangles
    %-------------------------------------------------------------------------
    CT = getInfoCTs(CTs,phi,msh,pa); % CT has many factors (structure var)
    nodeCTs=CT.nodes; areaChildCTs=CT.areaChild; iPs=CT.iPs;

    nf =1;
    
%% plot phi
if showPlot
    tic;time=0;
    fprintf('Plotting phi... ');
%     titlePlot = strcat('phi, jour = ',num2str(round(day,2)));
titlePlot = 'phi new';

    if plotContourChange % don't show phi's value, just show its contours with time
        if mod(ns,2)==1 % 2 step 1 time
            nf = plotNXFEM(msh,pa,phi,iPs,nf,'title',titlePlot,...
                'withMesh',withMesh); % only mesh
        end
    else % plot phi's value also
        nf = plotNXFEM(msh,pa,phi,iPs,nf,phi,'withMesh',withMesh,...
            'title',titlePlot,'iC','b'); % phi
    end
    fprintf('%fs\n',toc-time);
end