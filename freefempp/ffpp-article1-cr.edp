// Just for testing convergence rate
// Main file: ffpp-article1.edp

int nStep = 4;
real[int] hMax(nStep); //number of dof
real[int] errL2v(nStep), errH1v(nStep), errL2u(nStep), errH1u(nStep);

real r0 = 0.6; // interface

border b5(t=0,2*pi){ x=r0*cos(t); y=r0*sin(t);label=5;}
border b1(t=-1,1){ x=t; y=-1.;label=1;}
border b2(t=-1,1){ x=1; y=t;label=2;}
border b3(t=0,2){ x=1-t; y=1.;label=3;}
border b4(t=0,2){ x=-1; y=1-t;label=4;}

real lam = 1.; // lam in the equation
real gam1 = 1e5; // penalty in Omg1
real gam2 = 1e3; // penalty in Omg2

macro dn(u) (N.x*dx(u)+N.y*dy(u)) //  def the normal derivative 
macro g(u) (u^2) // fonction f non lineaire dans (3) et (4)

real alp1 = 1.; // alpha 1
real alp2 = 100.; // alpha 2
real bet1 = .5; // beta 1
real bet2 = 1.; //beta 2 (don't take affect)

for(int jj=0;jj<nStep;jj++){
  int nn=2^(jj+1)*10+1; //21,41,81
  mesh Th = buildmesh(b5(nn)+b1(nn)+b2(nn)+b3(nn)+b4(nn));
  fespace Vh(Th,P1);
  fespace Wh(Th,P0);
  Vh u,v,w,vold,vv;
  Vh h=hTriangle;
	hMax(jj) = h[].max;

  Vh phi = sqrt(x^2+y^2)-r0; // interface
  Vh gu2 = 0.; // in the case vex=0

  int nbtriangles = Th.nt;
  int nbvertices = Th.nv;

  // exact solutions
  // if vex=0 in Omg2
  Vh r = sqrt(x^2+y^2);
  Vh uex = (phi<=0)*( r^2/alp1 ) // (Omg1)
        + (phi>0)*( (1./alp2)*(r^2-r0^2) + r0^2/alp1 ); // (Omg2)
  Vh vex = (phi<=0)*( (r^2-r0^2)^2/bet1 ) // (Omg1)
          + (phi>0)*( 0. ); // (Omg2)
  Vh wex = (phi<=0)*( uex + bet1/(lam*alp1)*vex )
          + (phi>0)*( uex );
  Vh fv = (phi<=0)*( 8*(r0^2-2*r^2) - lam*vex*g(uex) ) // Omg1
        + (phi>0)* (0.); // v=0 in Omg2
  Vh fu = -4.;
  Vh fw = fu + 1/lam *fv;

  // plot(wex,wait=1,fill=1,value=1,cmm="wex",dim=3); // wex 
  // plot(vex,wait=1,fill=1,value=1,cmm="vex",dim=3); // vex 
  // plot(uex,wait=1,fill=1,value=1,cmm="uex",dim=3); // uex   

  // Resolution du probleme de w
  problem pbw(w,vv,solver=UMFPACK) = 
                    int2d(Th,levelset=phi)(alp1*(dx(w)*dx(vv)+dy(w)*dy(vv)))
                  + int2d(Th,levelset=-phi)(alp2*(dx(w)*dx(vv)+dy(w)*dy(vv)))
                  - int2d(Th,levelset=phi)(fw*vv)
                  - int2d(Th,levelset=-phi)(fw*vv)
                  + on(1,2,3,4,w=wex)
                  ;

  // Resolution du probleme de v
  problem pbv(v,vv,solver=UMFPACK) = 
                    int2d(Th,levelset=phi)(bet1*(dx(v)*dx(vv)+dy(v)*dy(vv))) 
                  + int2d(Th,levelset=-phi)(bet2*(dx(v)*dx(vv)+dy(v)*dy(vv))) 
                  - int2d(Th,levelset=phi)(lam*v*g(w-(bet1/(lam*alp1))*vold)*vv)
                  // - int2d(Th,levelset=-phi)(lam*v*g(w-(bet2/(lam*alp2))*vold)*vv)
                  - int2d(Th,levelset=-phi)(lam*v*gu2*vold*vv) // vex=0
                  - int1d(Th,levelset=phi)(bet1*dn(v)*vv)
                  - int1d(Th,levelset=-phi)(bet2*dn(v)*vv)
                  - int1d(Th,levelset=phi)(bet1*dn(vv)*v)
                  - int1d(Th,levelset=-phi)(bet2*dn(vv)*v)
                  + int1d(Th,levelset=phi)(gam1*v*vv)
                  + int1d(Th,levelset=-phi)(gam2*v*vv)
                  - int2d(Th,levelset=phi)(fv*vv)
                  - int2d(Th,levelset=-phi)(fv*vv)
                  + on(1,2,3,4,v=vex)
                  ;

  pbw; // solve w
  // plot(wex,wait=1,fill=1,value=1,cmm="wex",dim=3); // wex   
  // plot(w,wait=1,value=1,fill=1, cmm="wh",dim=3); // wh

  vold = 0.; // initial value of v
  int imax=30; // number of iterative steps

  // Vh err; real errL2, tol;
  // err = vex;
  // errL2 = sqrt(int2d(Th)(err^2));
  // tol = 1e-2;
  // int i=0;
  // while(errL2>tol && i<imax){
  //   pbv; // solve v
  //   vold = v;
  //   err = abs(v-vex);
  //   errL2 = sqrt(int2d(Th)(err^2));
  //   i=i+1;
  // }

  for(int i=0;i<imax;i++){
    pbv; // solve v
    vold = v;
  }

  // uh
  u = (phi<=0)*( w - (bet1/(alp1*lam))*v ) // Omg1
  + (phi>0)*( w - (bet2/(alp2*lam))*v ); // Omg2

  real errL2 = sqrt(int2d(Th)((v-vex)^2)); // L2
  errL2v(jj) = errL2;
  real errH1 = sqrt( int2d(Th)((v-vex)^2) + int2d(Th)((dx(v)-dx(vex))^2 + (dy(v)-dy(vex))^2) ); //H1
  errH1v(jj) = errH1;

  errL2 = sqrt(int2d(Th)((u-uex)^2)); // L2
  errL2u(jj) = errL2;
  errH1 = sqrt( int2d(Th)((u-uex)^2) + int2d(Th)((dx(u)-dx(uex))^2 + (dy(u)-dy(uex))^2) ); //H1
  errH1u(jj) = errH1;
}

{
ofstream fout("ffpp-article1-cr.dat");
for(int i=0;i<nStep;i++)
	fout << hMax(i) << " " << errL2v(i) << " " << errH1v(i) << " " << errL2u(i) << " " << errH1u(i) <<endl;
}

cout << endl;
for(int jj=1;jj<nStep;jj++){
	cout << "From " << hMax(jj-1) << " to " << hMax(jj) << ": " << log(errL2v(jj)/errL2v(jj-1))/log(hMax(jj)/hMax(jj-1))
														<< endl;
}
cout << endl;
