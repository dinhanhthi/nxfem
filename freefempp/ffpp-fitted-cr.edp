real xi=0.5;
int ndof = 4;
real[int] hmax(ndof);
real[int] errL2(ndof);
real[int] errH1(ndof);
int n;
real k1=1.;
real k2=1000.;
macro Grad(a)[dx(a),dy(a)]//

border C1(t=-1,xi){x=t;y=-1;};
border C2(t=xi,1){x=t;y=-1;};
border C3(t=-1,1){x=1;y=t;};
border C4(t=1,xi){x=t;y=1;};
border C5(t=xi,-1){x=t;y=1;};
border C6(t=1,-1){x=-1;y=t;};
border C7(t=-1,1){x=xi;y=t;};

for(int i=0; i<ndof; i++){
	n = 10*(i+2); // 20,30,40,50
	mesh Th=buildmesh((C1(n)+C2(n)+C3(n)+C4(n)+C5(n)+C6(n)+C7(n)));
	fespace Vh(Th,P1);
	Vh u,v;
	Vh h=hTriangle;
	hmax(i) = h[].max;
	func f=-2.;
	Vh k = (k2-k1)/3*Th(x,y).region + k1;
	func uex1 = x^2/k1;
	func uex2 = (x^2-xi^2)/k2 + xi^2/k1;
	Vh uex = (uex2-uex1)/3*Th(x,y).region + uex1;
	problem nxfem(u,v) = int2d(Th)(k*Grad(u)'*Grad(v)) - int2d(Th)(f*v) //'
					+ on(C1,C2,C3,C4,C5,C6,u=uex);
	nxfem;
	Vh err = u-uex;
	errL2(i) = sqrt(int2d(Th)(err^2));
	errH1(i) = sqrt(errL2(i)^2 + int2d(Th)(k*(dx(err)^2+dy(err)^2))); // with k inside
	// errH1(i) = sqrt(errL2^2 + int2d(Th)(dx(err)^2+dy(err)^2)); // without k inside
}

{
ofstream fout("ffpp-data.dat");
for(int i=0;i<ndof;i++)
	fout << hmax(i) << " " << errL2(i) << " " << errH1(i) <<endl;
}

// using gnuplot
// gnuplot
// using file "ffpp-fitted-cr.gnu"