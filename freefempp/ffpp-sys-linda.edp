/*
Quick test for simple system of equations, before applying in matlab
we will solve equations of w and u first and then solve v
Proposed by Linda
---- domain
Omg=[0,1]x[0,1], r=sqrt((x-.5)^2+(y-.5)^2)
---- exact solutions
wex=beta*twex
twex=(phi<0)*(r^4/beta1) + (phi>=0)*(r^4/beta2 - r0^4/beta2 + r0^4/beta1)
uex=(phi<0)*(r^2/alpha1) + (phi>=0)*(r^2/alpha2 - r0^2/alpha2 + r0^2/alpha1)
---- equation of tw (w=beta*tw)
-nabla(beta nabla tw) = -16r^2 \Omega
[tw]=[beta nabla_n tw]=0 \Gamma
tw=twex \partial\Omega
---- equation of u
-nabla(alpha nabla u) + beta v g(u) = -4 + (wex-alpha*uex)*g(uex) \Omega
[u]=[alpha nabla_n u]=0 \Gamma
u=uex \partial\Omega
---- v
v = 1/beta*(w-alpha*u)
STATUS: it works!!!
*/

int n=10;//55; //nf
int nn=10;//30;

real r0 = 0.3;
border b5(t=0,2*pi){ x=0.5+r0*cos(t); y=0.5+r0*sin(t);label=5;}
border b1(t=0,1){ x=t; y=0.;label=1;}
border b2(t=0,1){ x=1; y=t;label=2;}
border b3(t=0,1){ x=1-t; y=1.;label=3;}
border b4(t=0,1){ x=0; y=1-t;label=4;}
mesh Th = buildmesh(b5(n)+b1(nn)+b2(nn)+b3(nn)+b4(nn));

plot(b5(50)+b1(30)+b2(30)+b3(30)+b4(30),wait=1);
plot(Th,wait=1);

//mesh Th=square(n,n);
fespace Vh(Th,P1);
Vh u, w, tw, uold, v, vv;

macro dn(u) (N.x*dx(u)+N.y*dy(u)) //  def the normal derivative 
macro g(u) (u^2) // fonction f non lineaire dans (3) et (4)

Vh phi = sqrt((x-0.5)^2+(y-0.5)^2)-r0;
real bet1 = 1.;
real bet2 = 100.;
real alp1 = 1.;
real alp2 = 100.;

int nbtriangles = Th.nt;
int nbvertices = Th.nv;
  
Vh uex = (phi<0)*( 1/alp1 * ((x-0.5)^2+(y-0.5)^2) )
		+ (phi>=0)*( 1/alp2*((x-0.5)^2+(y-0.5)^2) - r0^2/alp2 + r0^2/alp1 );

Vh twex = (phi<0)*( 1/bet1 * ((x-0.5)^2+(y-0.5)^2)^2 )
		+ (phi>=0)*( 1/bet2*((x-0.5)^2+(y-0.5)^2)^2 - r0^4/bet2 + r0^4/bet1 );

Vh wex = (phi<0)*bet1*twex	+ (phi>=0)*bet2*twex;

Vh vex = (1/bet1)*(phi<0)*(wex-alp1*uex) + (1/bet2)*(phi>=0)*(wex-alp2*uex) ;

Vh fw = -16. * ((x-0.5)^2+(y-0.5)^2);
Vh fu = (phi<0)*(-4. + (wex-alp1*uex)*g(uex)) +(phi>=0)*(-4. + (wex-alp2*uex)*g(uex));
   

// Resolution du probleme (2) en \tilde w= \alpha w
problem pbtw(tw,v,solver=UMFPACK) = 
                    int2d(Th,levelset=phi)(bet1*(dx(tw)*dx(v)+dy(tw)*dy(v))) 
                  + int2d(Th,levelset=-phi)(bet2*(dx(tw)*dx(v)+dy(tw)*dy(v))) 
                  - int2d(Th,levelset=phi)(fw*v)
                  - int2d(Th,levelset=-phi)(fw*v)
                  + on(1,2,3,4,tw=twex)
				        	;

// Resolution du probleme (4) 
problem pbu(u,v,solver=UMFPACK) = 
                    int2d(Th,levelset=phi)(alp1*(dx(u)*dx(v)+dy(u)*dy(v)))
                  + int2d(Th,levelset=-phi)(alp2*(dx(u)*dx(v)+dy(u)*dy(v))) 
                  + int2d(Th,levelset=phi)(w*g(uold)*v)
                  - int2d(Th,levelset=phi)(alp1*u*g(uold)*v)
                  + int2d(Th,levelset=-phi)(w*g(uold)*v)
                  - int2d(Th,levelset=-phi)(alp2*u*g(uold)*v)
                  - int2d(Th,levelset=phi)(fu*v)
                  - int2d(Th,levelset=-phi)(fu*v)
                  + on(1,2,3,4,u=uex)
					        ;

pbtw;
w=(phi<0)*bet1*tw + (phi>=0)*bet2*tw;

uold=0.;
int imax=10;
for(int i=0;i<imax;i++){
  pbu;
  uold=u;
}

// Construction de v
vv = (1/bet1)*(phi<0)*(w-alp1*u) + (1/bet2)*(phi>=0)*(w-alp2*u) ;

plot(twex,wait=1,fill=1,value=1,cmm="twex",dim=3);  // twex
plot(tw,wait=1,value=1,fill=1, cmm="tw",dim=3); // twh
// plot(wex,wait=1,fill=1,value=1,cmm="wex",dim=3);  // wex
// plot(w,wait=1,value=1,fill=1, cmm="w",dim=3); // wh
plot(uex,wait=1,fill=1,value=1,cmm="uex",dim=3);   // uex
plot(u,wait=1,value=1,fill=1, cmm="u",dim=3); // uh
// plot(vex,wait=1,fill=1,value=1,cmm="vex",dim=3);   // vex
// plot(vv,wait=1,value=1,fill=1, cmm="v",dim=3); // vh