verbosity = 0;
int nSegSize = 4;
int n; // number of segment at each time step
// string meshName;
bool a = true;
bool saveMesh = false;


real[int] normPhiOnGh0(nSegSize); // ||phi^0||_L2(Gh)
real[int] normPhiphihOnOmg(nSegSize); // ||phi_h^0 - phi^0||_L2(Omg)
real[int] hTmax(nSegSize); // h
real[int] CRphiOnGh0(nSegSize); // convergence rate
real[int] CRphiphiOnOmg(nSegSize);


// Domain [0,1] x [0,1]
border C1(t=0,1){x=t;y=0;}; // bottom
border C2(t=0,1){x=1;y=t;}; // right
border C3(t=1,0){x=t;y=1;}; // top
border C4(t=1,0){x=0;y=t;}; // left


// phi
real xi = 0.15;
func phi = sqrt( (x-0.5)^2 + (y-0.75)^2 ) - xi;

int i=0;

// for (int i=0; i<nSegSize; i++){
	// n = nSeg(i);
n = 2^(i+3);

mesh Th;

// MESH
if (a==true){
  Th = square(n,n); // [0,1] x [0,1]
  // meshName = "Th_regular" + i + ".msh";
}else{
  cout << "thi dep trai" << endl;
}

plot(Th, wait=1);
// }